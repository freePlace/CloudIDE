import groovy.sql.Sql

group 'com.freeplace'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'rebel'

war.baseName = 'cloudIDE'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

def mySqlConnectorVersion = '5.1.31'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'

    //tomcat
    def tomcatVersion = '7.0.67'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
    "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    // servlets/ jstl
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"
    compile "javax.servlet:jstl:1.2"

    //jdbc
    compile "mysql:mysql-connector-java:${mySqlConnectorVersion}"

    // hibernate
    def hibernateVersion = '4.3.6.Final'
    compile "org.hibernate:hibernate-core:${hibernateVersion}"

    //ehcache
 //   testCompile ("org.hibernate:hibernate-ehcache:${hibernateVersion}"){
   //       exclude group: 'org.slf4j', module: 'slf4j-api'
   // }
    compile ("org.hibernate:hibernate-ehcache:${hibernateVersion}"){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // validation api
    def hibernateValidatorVersion = '5.2.2.Final'
    compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
    compile "org.hibernate:hibernate-validator-annotation-processor:${hibernateValidatorVersion}"
    compile "javax.el:javax.el-api:2.2.4"

    // spring
    def springVersion = '4.2.2.RELEASE'
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"

    compile "org.scribe:scribe:1.3.5"


    def aspectjVersion = '1.8.7'
    //aspectj
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    compile "org.aspectj:aspectjtools:${aspectjVersion}"

    // spring security
    def springSecurityVersion = '3.2.5.RELEASE';
    compile "org.springframework.security:spring-security-core:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"

    // spring social
    def springSocialVersion = "1.1.4.RELEASE"
    compile "org.springframework.social:spring-social-config:${springSocialVersion}"
    compile "org.springframework.social:spring-social-core:${springSocialVersion}"
    compile "org.springframework.social:spring-social-security:${springSocialVersion}"
    compile "org.springframework.social:spring-social-web:${springSocialVersion}"
    compile "org.springframework.social:spring-social-facebook:2.0.3.RELEASE"


    //test
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.springframework:spring-test:${springVersion}"
    def h2Version = '1.4.187'
    testCompile "com.h2database:h2:${h2Version}"
    def dbUnitVersion = '2.2'
    testCompile "dbunit:dbunit:${dbUnitVersion}"

    //utils
    compile "com.google.guava:guava:19.0-rc3";
    compile "org.apache.commons:commons-lang3:3.0";

    //jackson
    def jacksonVersion = '2.5.0';
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}";
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}";

    sourceSets {
        unitTest {
            java {
                srcDirs = ["test"]
            }
        }
    }

}
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'

configurations { driver }

dependencies {
    driver "mysql:mysql-connector-java:${mySqlConnectorVersion}"
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file -> loader.addURL(file.toURL())}

task setupData << {
    Properties props = new Properties()
    props.load(new FileInputStream("src/main/resources/application.properties"))
    def credentialProperties = [user: props.getProperty("jdbc.username"),
                                password: props.getProperty("jdbc.password")] as Properties
    def sql = Sql.newInstance(props.getProperty("jdbc.url"),
            credentialProperties,
            props.getProperty("jdbc.driverClassName"))
    String [] sqlStrings = new File('db/setup.sql').text.tokenize(';')
    sqlStrings.eachWithIndex { query, index -> sql.execute("${query};".replaceAll("''","'"))}
    sql.close()
}

gradle.projectsEvaluated {
    test.dependsOn(setupData)
    test.dependsOn(generateRebel)
}

task full(dependsOn: [test, tomcatRunWar]) << {
    println 'Done'
}

// fix tests!
// test and config second level cache
// debug queries
// add mock testing for service layer
//add static code analysis tool
//create auto dao generation task
//separate web services in new module
// use constructor injection!
//create ONE datasource
// test authorization redirections
//add facebook authorization
// password encoding

